<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

/**
 * Implements hook_theme().
 *
 */

function drupalbook_theme(){
  //echo 'zzz!!!';
  return array(
    // Объявляем название нашего темплейта.
    'my_custom_menu_template' => array(
      // Объявляем какие переменные принимает темплейт.
      'variables' => array(
        'items' => NULL,
      ),
      // Объявляем название файла-шаблона. html.twig указывать не нужно.
      'template' => 'my-custom-menu-template',
    ),
    'dummy_node_list' => [
      'variables' => [
        'limit' => 10,
      ],
    ],
  );
}

//function drupalbook_theme(){
//  return [
//    'dummy_node_list' => [
//      'variables' => [
//        'limit' => 10,
//      ],
//    ],
//  ];
//}


/**
 * Implements hook_preprocess_page().
 */
function drupalbook_preprocess_page(&$variables) {
  $default_form = \Drupal::config('contact.settings')->get('default_form');
  $entity = \Drupal::entityTypeManager()
    ->getStorage('contact_form')
    ->load($default_form);

  $message = \Drupal::entityTypeManager()
    ->getStorage('contact_message')
    ->create(array(
      'contact_form' => $entity->id(),
    ));

  $variables['contact_form'] = \Drupal::service('entity.form_builder')->getForm($message);
}

/**
 * @param $variables
 */
function drupalbook_preprocess_html(&$variables){
  //var_dump($variables);
}

/**
 * Implements hook_theme_suggestions_HOOK() for dummy_quote.
 *
 * Adds new theme hook suggestions:
 * - dummy-quote--{YEAR}
 * - dummy-quote--{SOURCE}
 * - dummy-quote--{AUTHOR}
 * - dummy-quote--{AUTHOR}--{YEAR}--{SOURCE}
 */
function dummy_theme_suggestions_dummy_quote(array $variables){
  $suggestions = [];
  /** @var \Drupal\Core\Transliteration\PhpTransliteration $transliteration */
  $transliteration = \Drupal::transliteration();
  $author = $variables['author'];
  $year = $variables['year'];
  $source = $variables['source_title'];
  if ($author){
    $author = $transliteration->transliterate($author);
    $author = strtolower($author);
    $author = str_replace(' ', '_', $author);
  }
  if ($source){
    $source = $transliteration->transliterate($source);
    $source = strtolower($source);
    $source = str_replace(' ', '_', $source);
  }
  $pattern = 'dummy_quote__';
  if ($year){
    //dummy_quote__{YEAR}.
    $suggestions[] = $pattern . $year;
  }
  if ($source){
    //dummy_quote__{SOURCE}.
    $suggestions[] = $pattern . $source;
  }
  if ($author){
    //dummy_quote__{AUTHOR}.
    $suggestions[] = $pattern . $author;
  }
  if ($author && $source && $year){
    //dummy_quote__{AUTHOR}__{YEAR}__{SOURCE}
    $suggestions[] = $pattern . $author . '__' . $year . '__' . $source;
  }
  //var_dump($suggestions);
  return $suggestions;
}
