<?php

/**
 * @file
 * Main file for hooks.
 */
use Drupal\Component\Utility\Html;
use Drupal\views\Plugin\views\query\Sql;

/**
 * Implements hook_block_view_alter().
 */
function dummy_block_view_alter(array &$build, \Drupal\Core\Block\BlockPluginInterface $block) {
  switch ($build['#id']) {
    # Машинное имя блока.
    case 'linktohelp':
      $build['#attached']['library'][] = 'core/drupal.dialog.ajax';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
//function dummy_preprocess_page(&$variables) {
//  if (\Drupal::service('path.matcher')->isFrontPage()) {
//    $variables['#attached']['library'][] = 'dummy/modal.from.js';
//  }
//}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function dummy_form_contact_message_zakazat_obratnyy_dzvonok_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  # Добавляем элемент куда будем выводить сообщения об ошибках или успешном
  # отправлении формы.
  $form['system_messages'] = [
    '#markup' => '<div id="' . Html::getClass($form_id) . '-messages"></div>',
    '#weight' => -100,
  ];
  # Добавляем наш AJAX колбек для кнопки. Так как он находится в отдельном
  # объекте, то указывать нужно полный путь с пространством имен.
  $form['actions']['submit']['#ajax'] = [
    'callback' => 'Drupal\dummy\AjaxContactSubmit::ajaxSubmitCallback',
    'event' => 'click',
    'progress' => [
      'type' => 'throbber',
    ],
  ];
}

/**
 * @file
 * Main file for hooks and custom functions.
 */

/**
 * Implements hook_preprocess_HOOK().
 */
/*
function dummy_preprocess_html(&$variables) {

  $random_message = \Drupal::service('dummy.random_message')->getRandomMessage();
  $msg = \Drupal::messenger();
  $msg->addMessage($random_message);


  $random_drupal_message = \Drupal::service('dummy.random_drupal_message');
  $random_drupal_message->setRandomMessage();
}*/

/**
 * Implements hook_theme().
 */
function dummy_theme($existing, $type, $theme, $path){
  return [
    'dummy_node_list' => [
      'variables' => [
        'limit' => 10,
      ],
    ],
    'dummy_example_first' => [
      'variables' => [],
    ],
    'dummy_example_second' => [
      'variables' => [
        'list_type' => 'ul',
        'items' => [],
      ],
      'file' => 'dummy.theme.inc',
    ],
    'dummy_quote'=>[
      'variables'=>[
        'quote'=>NULL,
        'author'=>NULL,
        'year'=>NULL,
        'source_title'=>NULL,
        'source_url'=>NULL,
      ],
      'file' => 'dummy.theme.inc',
      'pattern' => 'dummy_quote__'
    ],
    'contact_message_zakazat_obratnyy_dzvonok_form' =>[
      'render element'=>'form',
      'file' => 'dummy.theme.inc',
    ],
  ];
}

// dummy-quote
// dummy-quote--{YEAR}
// dummy-quote--{SOURCE}
// dummy-quote--{AUTHOR}
// dummy-quote--{AUTHOR}--{YEAR}--{SOURCE}

/**
 * implements template_preprocess_HOOK() for dummy_example_first.
 * @param $variables
 */
function template_preprocess_dummy_example_first(&$variables){
  $time = \Drupal::time()->getRequestTime();
  /** @var @var \Drupal\Core\Datetime\DateFormatter $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');
  $variables['date'] = $date_formatter->format($time);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function template_preprocess_dummy_node_list(&$variables) {
  $variables['nodes'] = NULL;
  $nids = \Drupal::entityQuery('node')
    ->condition('type', 'article')
    //->range(0, $variables['limit'])
    ->execute();
  $nodes =  \Drupal\node\Entity\Node::loadMultiple($nids);

  var_dump($nids);

  foreach ($nodes as $node) {
    $variables['nodes'][] = [
//      'label' => $node->title->value,
      'label' => $node->getTitle(),
    ];
  }

  // Random order.
  shuffle($variables['nodes']);
}
//function dummy_page_alter(&$page) {
//  // Add help text to the user login block.
//  $page['content'] = array(
//    '#weight' => 1,
//    '#markup' => t('OREST'),
//  );
//}
